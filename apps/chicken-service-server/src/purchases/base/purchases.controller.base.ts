/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { PurchasesService } from "../purchases.service";
import { PurchasesCreateInput } from "./PurchasesCreateInput";
import { Purchases } from "./Purchases";
import { PurchasesFindManyArgs } from "./PurchasesFindManyArgs";
import { PurchasesWhereUniqueInput } from "./PurchasesWhereUniqueInput";
import { PurchasesUpdateInput } from "./PurchasesUpdateInput";

export class PurchasesControllerBase {
  constructor(protected readonly service: PurchasesService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Purchases })
  async createPurchases(
    @common.Body() data: PurchasesCreateInput
  ): Promise<Purchases> {
    return await this.service.createPurchases({
      data: data,
      select: {
        cost: true,
        createdAt: true,
        id: true,
        item: true,
        purchaseDate: true,
        quantity: true,
        supplierName: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Purchases] })
  @ApiNestedQuery(PurchasesFindManyArgs)
  async purchasesItems(@common.Req() request: Request): Promise<Purchases[]> {
    const args = plainToClass(PurchasesFindManyArgs, request.query);
    return this.service.purchasesItems({
      ...args,
      select: {
        cost: true,
        createdAt: true,
        id: true,
        item: true,
        purchaseDate: true,
        quantity: true,
        supplierName: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Purchases })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async purchases(
    @common.Param() params: PurchasesWhereUniqueInput
  ): Promise<Purchases | null> {
    const result = await this.service.purchases({
      where: params,
      select: {
        cost: true,
        createdAt: true,
        id: true,
        item: true,
        purchaseDate: true,
        quantity: true,
        supplierName: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Purchases })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updatePurchases(
    @common.Param() params: PurchasesWhereUniqueInput,
    @common.Body() data: PurchasesUpdateInput
  ): Promise<Purchases | null> {
    try {
      return await this.service.updatePurchases({
        where: params,
        data: data,
        select: {
          cost: true,
          createdAt: true,
          id: true,
          item: true,
          purchaseDate: true,
          quantity: true,
          supplierName: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Purchases })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deletePurchases(
    @common.Param() params: PurchasesWhereUniqueInput
  ): Promise<Purchases | null> {
    try {
      return await this.service.deletePurchases({
        where: params,
        select: {
          cost: true,
          createdAt: true,
          id: true,
          item: true,
          purchaseDate: true,
          quantity: true,
          supplierName: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
