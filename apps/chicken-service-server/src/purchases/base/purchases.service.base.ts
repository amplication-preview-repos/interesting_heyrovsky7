/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Purchases as PrismaPurchases } from "@prisma/client";

export class PurchasesServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.PurchasesCountArgs, "select">
  ): Promise<number> {
    return this.prisma.purchases.count(args);
  }

  async purchasesItems<T extends Prisma.PurchasesFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.PurchasesFindManyArgs>
  ): Promise<PrismaPurchases[]> {
    return this.prisma.purchases.findMany<Prisma.PurchasesFindManyArgs>(args);
  }
  async purchases<T extends Prisma.PurchasesFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.PurchasesFindUniqueArgs>
  ): Promise<PrismaPurchases | null> {
    return this.prisma.purchases.findUnique(args);
  }
  async createPurchases<T extends Prisma.PurchasesCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.PurchasesCreateArgs>
  ): Promise<PrismaPurchases> {
    return this.prisma.purchases.create<T>(args);
  }
  async updatePurchases<T extends Prisma.PurchasesUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.PurchasesUpdateArgs>
  ): Promise<PrismaPurchases> {
    return this.prisma.purchases.update<T>(args);
  }
  async deletePurchases<T extends Prisma.PurchasesDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.PurchasesDeleteArgs>
  ): Promise<PrismaPurchases> {
    return this.prisma.purchases.delete(args);
  }
}
