/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Purchases } from "./Purchases";
import { PurchasesCountArgs } from "./PurchasesCountArgs";
import { PurchasesFindManyArgs } from "./PurchasesFindManyArgs";
import { PurchasesFindUniqueArgs } from "./PurchasesFindUniqueArgs";
import { CreatePurchasesArgs } from "./CreatePurchasesArgs";
import { UpdatePurchasesArgs } from "./UpdatePurchasesArgs";
import { DeletePurchasesArgs } from "./DeletePurchasesArgs";
import { PurchasesService } from "../purchases.service";
@graphql.Resolver(() => Purchases)
export class PurchasesResolverBase {
  constructor(protected readonly service: PurchasesService) {}

  async _purchasesItemsMeta(
    @graphql.Args() args: PurchasesCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Purchases])
  async purchasesItems(
    @graphql.Args() args: PurchasesFindManyArgs
  ): Promise<Purchases[]> {
    return this.service.purchasesItems(args);
  }

  @graphql.Query(() => Purchases, { nullable: true })
  async purchases(
    @graphql.Args() args: PurchasesFindUniqueArgs
  ): Promise<Purchases | null> {
    const result = await this.service.purchases(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Purchases)
  async createPurchases(
    @graphql.Args() args: CreatePurchasesArgs
  ): Promise<Purchases> {
    return await this.service.createPurchases({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => Purchases)
  async updatePurchases(
    @graphql.Args() args: UpdatePurchasesArgs
  ): Promise<Purchases | null> {
    try {
      return await this.service.updatePurchases({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Purchases)
  async deletePurchases(
    @graphql.Args() args: DeletePurchasesArgs
  ): Promise<Purchases | null> {
    try {
      return await this.service.deletePurchases(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
