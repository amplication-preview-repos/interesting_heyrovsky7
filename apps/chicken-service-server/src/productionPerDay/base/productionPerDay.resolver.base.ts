/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { ProductionPerDay } from "./ProductionPerDay";
import { ProductionPerDayCountArgs } from "./ProductionPerDayCountArgs";
import { ProductionPerDayFindManyArgs } from "./ProductionPerDayFindManyArgs";
import { ProductionPerDayFindUniqueArgs } from "./ProductionPerDayFindUniqueArgs";
import { CreateProductionPerDayArgs } from "./CreateProductionPerDayArgs";
import { UpdateProductionPerDayArgs } from "./UpdateProductionPerDayArgs";
import { DeleteProductionPerDayArgs } from "./DeleteProductionPerDayArgs";
import { ProductionPerDayService } from "../productionPerDay.service";
@graphql.Resolver(() => ProductionPerDay)
export class ProductionPerDayResolverBase {
  constructor(protected readonly service: ProductionPerDayService) {}

  async _productionPerDaysMeta(
    @graphql.Args() args: ProductionPerDayCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [ProductionPerDay])
  async productionPerDays(
    @graphql.Args() args: ProductionPerDayFindManyArgs
  ): Promise<ProductionPerDay[]> {
    return this.service.productionPerDays(args);
  }

  @graphql.Query(() => ProductionPerDay, { nullable: true })
  async productionPerDay(
    @graphql.Args() args: ProductionPerDayFindUniqueArgs
  ): Promise<ProductionPerDay | null> {
    const result = await this.service.productionPerDay(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => ProductionPerDay)
  async createProductionPerDay(
    @graphql.Args() args: CreateProductionPerDayArgs
  ): Promise<ProductionPerDay> {
    return await this.service.createProductionPerDay({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => ProductionPerDay)
  async updateProductionPerDay(
    @graphql.Args() args: UpdateProductionPerDayArgs
  ): Promise<ProductionPerDay | null> {
    try {
      return await this.service.updateProductionPerDay({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ProductionPerDay)
  async deleteProductionPerDay(
    @graphql.Args() args: DeleteProductionPerDayArgs
  ): Promise<ProductionPerDay | null> {
    try {
      return await this.service.deleteProductionPerDay(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
