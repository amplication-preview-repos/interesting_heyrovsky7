/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ProductionPerDayService } from "../productionPerDay.service";
import { ProductionPerDayCreateInput } from "./ProductionPerDayCreateInput";
import { ProductionPerDay } from "./ProductionPerDay";
import { ProductionPerDayFindManyArgs } from "./ProductionPerDayFindManyArgs";
import { ProductionPerDayWhereUniqueInput } from "./ProductionPerDayWhereUniqueInput";
import { ProductionPerDayUpdateInput } from "./ProductionPerDayUpdateInput";

export class ProductionPerDayControllerBase {
  constructor(protected readonly service: ProductionPerDayService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: ProductionPerDay })
  async createProductionPerDay(
    @common.Body() data: ProductionPerDayCreateInput
  ): Promise<ProductionPerDay> {
    return await this.service.createProductionPerDay({
      data: data,
      select: {
        createdAt: true,
        date: true,
        id: true,
        notes: true,
        quantityProduced: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [ProductionPerDay] })
  @ApiNestedQuery(ProductionPerDayFindManyArgs)
  async productionPerDays(
    @common.Req() request: Request
  ): Promise<ProductionPerDay[]> {
    const args = plainToClass(ProductionPerDayFindManyArgs, request.query);
    return this.service.productionPerDays({
      ...args,
      select: {
        createdAt: true,
        date: true,
        id: true,
        notes: true,
        quantityProduced: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: ProductionPerDay })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async productionPerDay(
    @common.Param() params: ProductionPerDayWhereUniqueInput
  ): Promise<ProductionPerDay | null> {
    const result = await this.service.productionPerDay({
      where: params,
      select: {
        createdAt: true,
        date: true,
        id: true,
        notes: true,
        quantityProduced: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: ProductionPerDay })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateProductionPerDay(
    @common.Param() params: ProductionPerDayWhereUniqueInput,
    @common.Body() data: ProductionPerDayUpdateInput
  ): Promise<ProductionPerDay | null> {
    try {
      return await this.service.updateProductionPerDay({
        where: params,
        data: data,
        select: {
          createdAt: true,
          date: true,
          id: true,
          notes: true,
          quantityProduced: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: ProductionPerDay })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteProductionPerDay(
    @common.Param() params: ProductionPerDayWhereUniqueInput
  ): Promise<ProductionPerDay | null> {
    try {
      return await this.service.deleteProductionPerDay({
        where: params,
        select: {
          createdAt: true,
          date: true,
          id: true,
          notes: true,
          quantityProduced: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
